knitr::opts_chunk$set(echo = TRUE,warning = FALSE, message = FALSE)
# You can set some global options for knitting chunks
knitr::opts_chunk$set(echo = TRUE)
# Load some libraries
library(tidyverse)
library(tidycensus)
library(sf)
library(spdep)
library(caret)
library(ckanr)
library(FNN)
library(grid)
library(gridExtra)
library(ggcorrplot) # plot correlation plot
library(corrr)      # another way to plot correlation plot
library(kableExtra)
library(broom)
library(tufte)
library(rmarkdown)
library(hexbin)
library(viridis)
library(cbsodataR)
library(jtools)     # for regression model plots
library(ggstance) # to support jtools plots
library(ggpubr)    # plotting R^2 value on ggplot point scatter
library(broom.mixed) # needed for effects plots
library(stargazer)
library(jsonlite)
library(ggplot2)
library(tmap)
library(tmaptools)
library(leaflet)
library(raster)
library(RColorBrewer)
library(mapview)
library(leaflet)
library(plotly)
library(ggspatial)
library(jpeg)
library(openxlsx)
library(lubridate)
library(httr)
#library(rjson)
# functions and data directory
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
palette2 <- c('#3E4A89','#1F9E89')
palette4 <- c('#3E4A89','#1F9E89','#35B779','#B4DE2C')
palette5 <- c('#440154','#3E4A89','#1F9E89','#35B779','#B4DE2C')
palette6 <- c('#440154','#3E4A89','#1F9E89','#35B779','#B4DE2C','#FDE725')
palette10 <- c('#440154','#482777','#3E4A89','#31688E','#26828E','#1F9E89','#35B779','#6DCD59','#B4DE2C','#FDE725')
#Shengqian
#setwd("/Users/sqwang/Library/CloudStorage/OneDrive-PennO365/penn/6th/Practicum/Data")
#Sam
#setwd("")
#michael
#setwd("")
#tiffany
#setwd("/Users/yql/Library/CloudStorage/OneDrive-PennO365/penn/6th/Practicum/Data")
#ling
setwd("/Users/lingchen/Documents/Practicum/Practicum_Philly_2024/Data")
knitr::opts_chunk$set(echo = TRUE,warning = FALSE, message = FALSE)
#Shengqian
#setwd("/Users/sqwang/Library/CloudStorage/OneDrive-PennO365/penn/6th/Practicum/Data")
setwd("D:/OneDrive - PennO365/penn/6th/Practicum/Data")
#Sam
#setwd("")
#michael
#setwd("")
#tiffany
#setwd("")
#ling
#setwd("")
coords_raw <- read.csv("./Old_Data_for_Testing/zoneCoords.csv")
# split coords
coords_split <- strsplit(coords_raw$coords, ",")
coords_raw$latitude <- as.numeric(sapply(coords_split, `[`, 1))
coords_raw$longitude <- as.numeric(sapply(coords_split, `[`, 2))
# create coords shapefile
coords <- st_as_sf(coords_raw, coords = c("longitude", "latitude"), crs = 'ESRI:102729')
linAssets <- read_sf('./resmartloadingzones/Curb_and_Asset_Shapefiles/linear_assets.shp')%>% st_transform('ESRI:102729')
# load booking data
bookings <-read.csv("./Old_Data_for_Testing/Booking Data(1).csv")
# load curb zone data
curb_zone <-  read_json("./resmartloadingzones/curb_zones.json")
# load CDS event data
event_CDS <- read.csv("./events_export_CDS.csv")
# load regulation geojson
#regulations <- st_read("./resmartloadingzones/regulations.geojson")
#
coords<- coords%>% select(SmartZoneName)
bookings <-  left_join(bookings,coords, by = 'SmartZoneName')
booking_only <- bookings %>% filter(EventType == 'booking')
policy <- read.csv("./policy_df.csv")
zone <- read.csv('./zone_df.csv')
large_bld <- bld %>% filter(Shape__Area > 800)%>% st_transform('ESRI:102729')%>%select()
#bld <- st_read('/Users/sqwang/Downloads/LI_BUILDING_FOOTPRINTS.geojson')
bld <- st_read('E:/Downloads/LI_BUILDING_FOOTPRINTS.geojson')
large_bld <- bld %>% filter(Shape__Area > 800)%>% st_transform('ESRI:102729')%>%select(geometry)
coords<- coords %>% st_transform('ESRI:102729')
View(coords)
coords <- coords %>%
mutate(bld_nn5 = nn_function(st_coordinates(st_centroid(coords)), st_coordinates(st_centroid(large_bld)), 5))
View(coords)
large_bld <- bld%>% st_transform('ESRI:102729')%>%select(geometry)
coords <- coords %>%
mutate(bld_nn5 = nn_function(st_coordinates(st_centroid(coords)), st_coordinates(st_centroid(large_bld)), 5))
View(coords)
coords$bld.Buffer <- coords %>%
st_buffer(660) %>%
aggregate(mutate(large_bld, counter = 1),., sum) %>%
pull(counter)
View(coords)
large_bld <- bld %>% filter(Shape__Area > 800)%>% st_transform('ESRI:102729')%>%select(geometry)
if (st_crs(coords) != st_crs(large_bld)) {
large_bld <- st_transform(large_bld, st_crs(coords))
}
# Calculate distances from each point to each building
distances <- st_distance(coords, large_bld, by_element = FALSE)
# Convert distances matrix to a data frame for easier manipulation
distances_df <- as.data.frame(distances)
View(distances_df)
ggplot()+
geom_sf(data = coords)+
geom_sf(data = large_bld)
View(coords)
ggplot()+
geom_sf(data = coords)
coords_split <- strsplit(coords_raw$coords, ",")
coords_raw$latitude <- as.numeric(sapply(coords_split, `[`, 1))
coords_raw$longitude <- as.numeric(sapply(coords_split, `[`, 2))
# create coords shapefile
coords <- st_as_sf(coords_raw, coords = c("longitude", "latitude"), crs = 'EPSG:4326')
ggplot()+
geom_sf(data = coords)
coords<- coords %>% st_transform('ESRI:102729')
coords <- coords %>%
mutate(bld_nn5 = nn_function(st_coordinates(st_centroid(coords)), st_coordinates(st_centroid(large_bld)), 5))
ggplot()+
geom_sf(data = coords)
ggplot()+
geom_sf(data = coords)+
geom_sf(data = large_bld)
if (st_crs(coords) != st_crs(large_bld)) {
large_bld <- st_transform(large_bld, st_crs(coords))
}
# Convert distances matrix to a data frame for easier manipulation
distances_df <- as.data.frame(distances)
# For each point, find the IDs of the nearest 5 buildings
nearest_buildings <- apply(distances_df, 1, function(x) order(x)[1:5])
colnames(nearest_summary) <- paste0("Building_", 1:5)
# Optionally, create a summary data frame with the distances to the nearest 5 buildings
nearest_summary <- t(apply(nearest_buildings, 2, function(x, distances) distances[x], distances = distances_df))
colnames(nearest_summary) <- paste0("Building_", 1:5)
View(nearest_summary)
View(nearest_summary[[6]][[1]])
coords <- coords %>%
mutate(bld_nn5 = nn_function(st_coordinates(st_centroid(coords)), st_coordinates(st_centroid(large_bld)), 5))
View(coords)
typeof(coords)
typeof(bld)
typeof(large_bld)
plot(coords3)
plot(coords)
